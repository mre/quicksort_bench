<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="806" onload="init(evt)" viewBox="0 0 1200 806" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="806" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="789.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="789.00"> </text><svg id="frames" x="10" width="1180" total_samples="239"><g><title>libdyld.dylib`dyld4::LibSystemHelpers::getenv (1 samples, 0.42%)</title><rect x="0.0000%" y="725" width="0.4184%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="735.50"></text></g><g><title>libsystem_c.dylib`exit (1 samples, 0.42%)</title><rect x="0.0000%" y="709" width="0.4184%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="719.50"></text></g><g><title>dyld`dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.42%)</title><rect x="0.0000%" y="693" width="0.4184%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="703.50"></text></g><g><title>dyld`invocation function for block in dyld4::RuntimeState::_finalizeListTLV (1 samples, 0.42%)</title><rect x="0.0000%" y="677" width="0.4184%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="687.50"></text></g><g><title>quicksort_bench`std::sys_common::thread_info::THREAD_INFO::__getit::destroy (1 samples, 0.42%)</title><rect x="0.0000%" y="661" width="0.4184%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="671.50"></text></g><g><title>quicksort_bench`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 1.26%)</title><rect x="0.4184%" y="629" width="1.2552%" height="15" fill="rgb(232,128,0)" fg:x="1" fg:w="3"/><text x="0.6684%" y="639.50"></text></g><g><title>quicksort_bench`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (6 samples, 2.51%)</title><rect x="1.6736%" y="629" width="2.5105%" height="15" fill="rgb(207,160,47)" fg:x="4" fg:w="6"/><text x="1.9236%" y="639.50">qu..</text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 4.18%)</title><rect x="0.4184%" y="645" width="4.1841%" height="15" fill="rgb(228,23,34)" fg:x="1" fg:w="10"/><text x="0.6684%" y="655.50">quick..</text></g><g><title>quicksort_bench`rand::rngs::thread::thread_rng (1 samples, 0.42%)</title><rect x="4.1841%" y="629" width="0.4184%" height="15" fill="rgb(218,30,26)" fg:x="10" fg:w="1"/><text x="4.4341%" y="639.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 1.67%)</title><rect x="4.6025%" y="629" width="1.6736%" height="15" fill="rgb(220,122,19)" fg:x="11" fg:w="4"/><text x="4.8525%" y="639.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (9 samples, 3.77%)</title><rect x="6.2762%" y="613" width="3.7657%" height="15" fill="rgb(250,228,42)" fg:x="15" fg:w="9"/><text x="6.5262%" y="623.50">quic..</text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.42%)</title><rect x="10.0418%" y="597" width="0.4184%" height="15" fill="rgb(240,193,28)" fg:x="24" fg:w="1"/><text x="10.2918%" y="607.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.42%)</title><rect x="10.0418%" y="581" width="0.4184%" height="15" fill="rgb(216,20,37)" fg:x="24" fg:w="1"/><text x="10.2918%" y="591.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 1.67%)</title><rect x="10.4603%" y="597" width="1.6736%" height="15" fill="rgb(206,188,39)" fg:x="25" fg:w="4"/><text x="10.7103%" y="607.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="12.1339%" y="581" width="0.4184%" height="15" fill="rgb(217,207,13)" fg:x="29" fg:w="1"/><text x="12.3839%" y="591.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 2.09%)</title><rect x="12.5523%" y="581" width="2.0921%" height="15" fill="rgb(231,73,38)" fg:x="30" fg:w="5"/><text x="12.8023%" y="591.50">q..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="14.2259%" y="565" width="0.4184%" height="15" fill="rgb(225,20,46)" fg:x="34" fg:w="1"/><text x="14.4759%" y="575.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="14.2259%" y="549" width="0.4184%" height="15" fill="rgb(210,31,41)" fg:x="34" fg:w="1"/><text x="14.4759%" y="559.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="14.2259%" y="533" width="0.4184%" height="15" fill="rgb(221,200,47)" fg:x="34" fg:w="1"/><text x="14.4759%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="14.2259%" y="517" width="0.4184%" height="15" fill="rgb(226,26,5)" fg:x="34" fg:w="1"/><text x="14.4759%" y="527.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="14.2259%" y="501" width="0.4184%" height="15" fill="rgb(249,33,26)" fg:x="34" fg:w="1"/><text x="14.4759%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.42%)</title><rect x="14.6444%" y="565" width="0.4184%" height="15" fill="rgb(235,183,28)" fg:x="35" fg:w="1"/><text x="14.8944%" y="575.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.42%)</title><rect x="14.6444%" y="549" width="0.4184%" height="15" fill="rgb(221,5,38)" fg:x="35" fg:w="1"/><text x="14.8944%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="15.0628%" y="565" width="0.4184%" height="15" fill="rgb(247,18,42)" fg:x="36" fg:w="1"/><text x="15.3128%" y="575.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="15.4812%" y="565" width="1.2552%" height="15" fill="rgb(241,131,45)" fg:x="37" fg:w="3"/><text x="15.7312%" y="575.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="16.3180%" y="549" width="0.4184%" height="15" fill="rgb(249,31,29)" fg:x="39" fg:w="1"/><text x="16.5680%" y="559.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="16.3180%" y="533" width="0.4184%" height="15" fill="rgb(225,111,53)" fg:x="39" fg:w="1"/><text x="16.5680%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="16.3180%" y="517" width="0.4184%" height="15" fill="rgb(238,160,17)" fg:x="39" fg:w="1"/><text x="16.5680%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="16.3180%" y="501" width="0.4184%" height="15" fill="rgb(214,148,48)" fg:x="39" fg:w="1"/><text x="16.5680%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.42%)</title><rect x="16.3180%" y="485" width="0.4184%" height="15" fill="rgb(232,36,49)" fg:x="39" fg:w="1"/><text x="16.5680%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.42%)</title><rect x="16.3180%" y="469" width="0.4184%" height="15" fill="rgb(209,103,24)" fg:x="39" fg:w="1"/><text x="16.5680%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`medium_malloc_should_clear (1 samples, 0.42%)</title><rect x="16.3180%" y="453" width="0.4184%" height="15" fill="rgb(229,88,8)" fg:x="39" fg:w="1"/><text x="16.5680%" y="463.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 3.35%)</title><rect x="16.7364%" y="549" width="3.3473%" height="15" fill="rgb(213,181,19)" fg:x="40" fg:w="8"/><text x="16.9864%" y="559.50">qui..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="20.0837%" y="533" width="0.4184%" height="15" fill="rgb(254,191,54)" fg:x="48" fg:w="1"/><text x="20.3337%" y="543.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 2.51%)</title><rect x="20.5021%" y="533" width="2.5105%" height="15" fill="rgb(241,83,37)" fg:x="49" fg:w="6"/><text x="20.7521%" y="543.50">qu..</text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="23.0126%" y="517" width="1.2552%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="3"/><text x="23.2626%" y="527.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="23.8494%" y="501" width="0.4184%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="1"/><text x="24.0994%" y="511.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="23.8494%" y="485" width="0.4184%" height="15" fill="rgb(245,192,40)" fg:x="57" fg:w="1"/><text x="24.0994%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="23.8494%" y="469" width="0.4184%" height="15" fill="rgb(238,167,29)" fg:x="57" fg:w="1"/><text x="24.0994%" y="479.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="23.8494%" y="453" width="0.4184%" height="15" fill="rgb(232,182,51)" fg:x="57" fg:w="1"/><text x="24.0994%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="23.8494%" y="437" width="0.4184%" height="15" fill="rgb(231,60,39)" fg:x="57" fg:w="1"/><text x="24.0994%" y="447.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="24.2678%" y="501" width="0.4184%" height="15" fill="rgb(208,69,12)" fg:x="58" fg:w="1"/><text x="24.5178%" y="511.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 2.09%)</title><rect x="24.6862%" y="501" width="2.0921%" height="15" fill="rgb(235,93,37)" fg:x="59" fg:w="5"/><text x="24.9362%" y="511.50">q..</text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 2.09%)</title><rect x="26.7782%" y="485" width="2.0921%" height="15" fill="rgb(213,116,39)" fg:x="64" fg:w="5"/><text x="27.0282%" y="495.50">q..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.84%)</title><rect x="28.0335%" y="469" width="0.8368%" height="15" fill="rgb(222,207,29)" fg:x="67" fg:w="2"/><text x="28.2835%" y="479.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 0.84%)</title><rect x="28.0335%" y="453" width="0.8368%" height="15" fill="rgb(206,96,30)" fg:x="67" fg:w="2"/><text x="28.2835%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.84%)</title><rect x="28.0335%" y="437" width="0.8368%" height="15" fill="rgb(218,138,4)" fg:x="67" fg:w="2"/><text x="28.2835%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="28.4519%" y="421" width="0.4184%" height="15" fill="rgb(250,191,14)" fg:x="68" fg:w="1"/><text x="28.7019%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="28.8703%" y="469" width="0.4184%" height="15" fill="rgb(239,60,40)" fg:x="69" fg:w="1"/><text x="29.1203%" y="479.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 2.51%)</title><rect x="29.2887%" y="469" width="2.5105%" height="15" fill="rgb(206,27,48)" fg:x="70" fg:w="6"/><text x="29.5387%" y="479.50">qu..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="31.3808%" y="453" width="0.4184%" height="15" fill="rgb(225,35,8)" fg:x="75" fg:w="1"/><text x="31.6308%" y="463.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="31.3808%" y="437" width="0.4184%" height="15" fill="rgb(250,213,24)" fg:x="75" fg:w="1"/><text x="31.6308%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="31.3808%" y="421" width="0.4184%" height="15" fill="rgb(247,123,22)" fg:x="75" fg:w="1"/><text x="31.6308%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="31.3808%" y="405" width="0.4184%" height="15" fill="rgb(231,138,38)" fg:x="75" fg:w="1"/><text x="31.6308%" y="415.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="31.3808%" y="389" width="0.4184%" height="15" fill="rgb(231,145,46)" fg:x="75" fg:w="1"/><text x="31.6308%" y="399.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="31.7992%" y="453" width="0.4184%" height="15" fill="rgb(251,118,11)" fg:x="76" fg:w="1"/><text x="32.0492%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.42%)</title><rect x="31.7992%" y="437" width="0.4184%" height="15" fill="rgb(217,147,25)" fg:x="76" fg:w="1"/><text x="32.0492%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.42%)</title><rect x="31.7992%" y="421" width="0.4184%" height="15" fill="rgb(247,81,37)" fg:x="76" fg:w="1"/><text x="32.0492%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_from_free_list (1 samples, 0.42%)</title><rect x="31.7992%" y="405" width="0.4184%" height="15" fill="rgb(209,12,38)" fg:x="76" fg:w="1"/><text x="32.0492%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`small_free_list_add_ptr (1 samples, 0.42%)</title><rect x="31.7992%" y="389" width="0.4184%" height="15" fill="rgb(227,1,9)" fg:x="76" fg:w="1"/><text x="32.0492%" y="399.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 2.09%)</title><rect x="32.2176%" y="453" width="2.0921%" height="15" fill="rgb(248,47,43)" fg:x="77" fg:w="5"/><text x="32.4676%" y="463.50">q..</text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.84%)</title><rect x="34.3096%" y="437" width="0.8368%" height="15" fill="rgb(221,10,30)" fg:x="82" fg:w="2"/><text x="34.5596%" y="447.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 2.51%)</title><rect x="35.1464%" y="421" width="2.5105%" height="15" fill="rgb(210,229,1)" fg:x="84" fg:w="6"/><text x="35.3964%" y="431.50">qu..</text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.42%)</title><rect x="37.6569%" y="405" width="0.4184%" height="15" fill="rgb(222,148,37)" fg:x="90" fg:w="1"/><text x="37.9069%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="39.7490%" y="325" width="0.4184%" height="15" fill="rgb(234,67,33)" fg:x="95" fg:w="1"/><text x="39.9990%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="39.7490%" y="309" width="0.4184%" height="15" fill="rgb(247,98,35)" fg:x="95" fg:w="1"/><text x="39.9990%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.84%)</title><rect x="39.7490%" y="357" width="0.8368%" height="15" fill="rgb(247,138,52)" fg:x="95" fg:w="2"/><text x="39.9990%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.84%)</title><rect x="39.7490%" y="341" width="0.8368%" height="15" fill="rgb(213,79,30)" fg:x="95" fg:w="2"/><text x="39.9990%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="40.1674%" y="325" width="0.4184%" height="15" fill="rgb(246,177,23)" fg:x="96" fg:w="1"/><text x="40.4174%" y="335.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 2.93%)</title><rect x="38.0753%" y="405" width="2.9289%" height="15" fill="rgb(230,62,27)" fg:x="91" fg:w="7"/><text x="38.3253%" y="415.50">qu..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 1.26%)</title><rect x="39.7490%" y="389" width="1.2552%" height="15" fill="rgb(216,154,8)" fg:x="95" fg:w="3"/><text x="39.9990%" y="399.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (3 samples, 1.26%)</title><rect x="39.7490%" y="373" width="1.2552%" height="15" fill="rgb(244,35,45)" fg:x="95" fg:w="3"/><text x="39.9990%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.42%)</title><rect x="40.5858%" y="357" width="0.4184%" height="15" fill="rgb(251,115,12)" fg:x="97" fg:w="1"/><text x="40.8358%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="44.3515%" y="357" width="0.4184%" height="15" fill="rgb(240,54,50)" fg:x="106" fg:w="1"/><text x="44.6015%" y="367.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (10 samples, 4.18%)</title><rect x="41.0042%" y="389" width="4.1841%" height="15" fill="rgb(233,84,52)" fg:x="98" fg:w="10"/><text x="41.2542%" y="399.50">quick..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.84%)</title><rect x="44.3515%" y="373" width="0.8368%" height="15" fill="rgb(207,117,47)" fg:x="106" fg:w="2"/><text x="44.6015%" y="383.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="44.7699%" y="357" width="0.4184%" height="15" fill="rgb(249,43,39)" fg:x="107" fg:w="1"/><text x="45.0199%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="44.7699%" y="341" width="0.4184%" height="15" fill="rgb(209,38,44)" fg:x="107" fg:w="1"/><text x="45.0199%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="44.7699%" y="325" width="0.4184%" height="15" fill="rgb(236,212,23)" fg:x="107" fg:w="1"/><text x="45.0199%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="44.7699%" y="309" width="0.4184%" height="15" fill="rgb(242,79,21)" fg:x="107" fg:w="1"/><text x="45.0199%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="45.6067%" y="373" width="0.4184%" height="15" fill="rgb(211,96,35)" fg:x="109" fg:w="1"/><text x="45.8567%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="46.0251%" y="373" width="0.4184%" height="15" fill="rgb(253,215,40)" fg:x="110" fg:w="1"/><text x="46.2751%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="46.4435%" y="373" width="0.4184%" height="15" fill="rgb(211,81,21)" fg:x="111" fg:w="1"/><text x="46.6935%" y="383.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 1.67%)</title><rect x="46.8619%" y="373" width="1.6736%" height="15" fill="rgb(208,190,38)" fg:x="112" fg:w="4"/><text x="47.1119%" y="383.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="48.1172%" y="357" width="0.4184%" height="15" fill="rgb(235,213,38)" fg:x="115" fg:w="1"/><text x="48.3672%" y="367.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="48.1172%" y="341" width="0.4184%" height="15" fill="rgb(237,122,38)" fg:x="115" fg:w="1"/><text x="48.3672%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="48.1172%" y="325" width="0.4184%" height="15" fill="rgb(244,218,35)" fg:x="115" fg:w="1"/><text x="48.3672%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="48.1172%" y="309" width="0.4184%" height="15" fill="rgb(240,68,47)" fg:x="115" fg:w="1"/><text x="48.3672%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="48.1172%" y="293" width="0.4184%" height="15" fill="rgb(210,16,53)" fg:x="115" fg:w="1"/><text x="48.3672%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="48.1172%" y="277" width="0.4184%" height="15" fill="rgb(235,124,12)" fg:x="115" fg:w="1"/><text x="48.3672%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 0.84%)</title><rect x="48.5356%" y="357" width="0.8368%" height="15" fill="rgb(224,169,11)" fg:x="116" fg:w="2"/><text x="48.7856%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="49.3724%" y="357" width="0.4184%" height="15" fill="rgb(250,166,2)" fg:x="118" fg:w="1"/><text x="49.6224%" y="367.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.84%)</title><rect x="49.7908%" y="357" width="0.8368%" height="15" fill="rgb(242,216,29)" fg:x="119" fg:w="2"/><text x="50.0408%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (3 samples, 1.26%)</title><rect x="50.6276%" y="341" width="1.2552%" height="15" fill="rgb(230,116,27)" fg:x="121" fg:w="3"/><text x="50.8776%" y="351.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="51.8828%" y="341" width="0.4184%" height="15" fill="rgb(228,99,48)" fg:x="124" fg:w="1"/><text x="52.1328%" y="351.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="52.3013%" y="341" width="1.2552%" height="15" fill="rgb(253,11,6)" fg:x="125" fg:w="3"/><text x="52.5513%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="53.5565%" y="325" width="0.4184%" height="15" fill="rgb(247,143,39)" fg:x="128" fg:w="1"/><text x="53.8065%" y="335.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="53.9749%" y="325" width="1.2552%" height="15" fill="rgb(236,97,10)" fg:x="129" fg:w="3"/><text x="54.2249%" y="335.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="54.8117%" y="309" width="0.4184%" height="15" fill="rgb(233,208,19)" fg:x="131" fg:w="1"/><text x="55.0617%" y="319.50"></text></g><g><title>quicksort_bench`DYLD-STUB$$realloc (1 samples, 0.42%)</title><rect x="54.8117%" y="293" width="0.4184%" height="15" fill="rgb(216,164,2)" fg:x="131" fg:w="1"/><text x="55.0617%" y="303.50"></text></g><g><title>quicksort_bench`DYLD-STUB$$free (1 samples, 0.42%)</title><rect x="55.2301%" y="325" width="0.4184%" height="15" fill="rgb(220,129,5)" fg:x="132" fg:w="1"/><text x="55.4801%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="55.6485%" y="309" width="0.4184%" height="15" fill="rgb(242,17,10)" fg:x="133" fg:w="1"/><text x="55.8985%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.42%)</title><rect x="56.0669%" y="309" width="0.4184%" height="15" fill="rgb(242,107,0)" fg:x="134" fg:w="1"/><text x="56.3169%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="56.4854%" y="309" width="0.4184%" height="15" fill="rgb(251,28,31)" fg:x="135" fg:w="1"/><text x="56.7354%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="56.9038%" y="309" width="0.4184%" height="15" fill="rgb(233,223,10)" fg:x="136" fg:w="1"/><text x="57.1538%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="58.5774%" y="277" width="0.4184%" height="15" fill="rgb(215,21,27)" fg:x="140" fg:w="1"/><text x="58.8274%" y="287.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 2.09%)</title><rect x="57.3222%" y="309" width="2.0921%" height="15" fill="rgb(232,23,21)" fg:x="137" fg:w="5"/><text x="57.5722%" y="319.50">q..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.84%)</title><rect x="58.5774%" y="293" width="0.8368%" height="15" fill="rgb(244,5,23)" fg:x="140" fg:w="2"/><text x="58.8274%" y="303.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="58.9958%" y="277" width="0.4184%" height="15" fill="rgb(226,81,46)" fg:x="141" fg:w="1"/><text x="59.2458%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="58.9958%" y="261" width="0.4184%" height="15" fill="rgb(247,70,30)" fg:x="141" fg:w="1"/><text x="59.2458%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="59.4142%" y="293" width="0.4184%" height="15" fill="rgb(212,68,19)" fg:x="142" fg:w="1"/><text x="59.6642%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.84%)</title><rect x="59.8326%" y="293" width="0.8368%" height="15" fill="rgb(240,187,13)" fg:x="143" fg:w="2"/><text x="60.0826%" y="303.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="60.6695%" y="293" width="0.4184%" height="15" fill="rgb(223,113,26)" fg:x="145" fg:w="1"/><text x="60.9195%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="64.8536%" y="213" width="0.4184%" height="15" fill="rgb(206,192,2)" fg:x="155" fg:w="1"/><text x="65.1036%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="65.2720%" y="213" width="0.4184%" height="15" fill="rgb(241,108,4)" fg:x="156" fg:w="1"/><text x="65.5220%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.42%)</title><rect x="65.6904%" y="213" width="0.4184%" height="15" fill="rgb(247,173,49)" fg:x="157" fg:w="1"/><text x="65.9404%" y="223.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 5.44%)</title><rect x="61.0879%" y="293" width="5.4393%" height="15" fill="rgb(224,114,35)" fg:x="146" fg:w="13"/><text x="61.3379%" y="303.50">quickso..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 2.09%)</title><rect x="64.4351%" y="277" width="2.0921%" height="15" fill="rgb(245,159,27)" fg:x="154" fg:w="5"/><text x="64.6851%" y="287.50">q..</text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (5 samples, 2.09%)</title><rect x="64.4351%" y="261" width="2.0921%" height="15" fill="rgb(245,172,44)" fg:x="154" fg:w="5"/><text x="64.6851%" y="271.50">q..</text></g><g><title>libsystem_malloc.dylib`_realloc (5 samples, 2.09%)</title><rect x="64.4351%" y="245" width="2.0921%" height="15" fill="rgb(236,23,11)" fg:x="154" fg:w="5"/><text x="64.6851%" y="255.50">l..</text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (5 samples, 2.09%)</title><rect x="64.4351%" y="229" width="2.0921%" height="15" fill="rgb(205,117,38)" fg:x="154" fg:w="5"/><text x="64.6851%" y="239.50">l..</text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="66.1088%" y="213" width="0.4184%" height="15" fill="rgb(237,72,25)" fg:x="158" fg:w="1"/><text x="66.3588%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.42%)</title><rect x="66.9456%" y="277" width="0.4184%" height="15" fill="rgb(244,70,9)" fg:x="160" fg:w="1"/><text x="67.1956%" y="287.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="67.3640%" y="277" width="1.2552%" height="15" fill="rgb(217,125,39)" fg:x="161" fg:w="3"/><text x="67.6140%" y="287.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="68.2008%" y="261" width="0.4184%" height="15" fill="rgb(235,36,10)" fg:x="163" fg:w="1"/><text x="68.4508%" y="271.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="68.2008%" y="245" width="0.4184%" height="15" fill="rgb(251,123,47)" fg:x="163" fg:w="1"/><text x="68.4508%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="68.2008%" y="229" width="0.4184%" height="15" fill="rgb(221,13,13)" fg:x="163" fg:w="1"/><text x="68.4508%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="68.2008%" y="213" width="0.4184%" height="15" fill="rgb(238,131,9)" fg:x="163" fg:w="1"/><text x="68.4508%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="68.2008%" y="197" width="0.4184%" height="15" fill="rgb(211,50,8)" fg:x="163" fg:w="1"/><text x="68.4508%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="68.2008%" y="181" width="0.4184%" height="15" fill="rgb(245,182,24)" fg:x="163" fg:w="1"/><text x="68.4508%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.42%)</title><rect x="68.6192%" y="261" width="0.4184%" height="15" fill="rgb(242,14,37)" fg:x="164" fg:w="1"/><text x="68.8692%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="69.0377%" y="261" width="0.4184%" height="15" fill="rgb(246,228,12)" fg:x="165" fg:w="1"/><text x="69.2877%" y="271.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="69.4561%" y="261" width="0.4184%" height="15" fill="rgb(213,55,15)" fg:x="166" fg:w="1"/><text x="69.7061%" y="271.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 3.35%)</title><rect x="69.8745%" y="261" width="3.3473%" height="15" fill="rgb(209,9,3)" fg:x="167" fg:w="8"/><text x="70.1245%" y="271.50">qui..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 1.26%)</title><rect x="71.9665%" y="245" width="1.2552%" height="15" fill="rgb(230,59,30)" fg:x="172" fg:w="3"/><text x="72.2165%" y="255.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 0.84%)</title><rect x="72.3849%" y="229" width="0.8368%" height="15" fill="rgb(209,121,21)" fg:x="173" fg:w="2"/><text x="72.6349%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.84%)</title><rect x="72.3849%" y="213" width="0.8368%" height="15" fill="rgb(220,109,13)" fg:x="173" fg:w="2"/><text x="72.6349%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="72.8033%" y="197" width="0.4184%" height="15" fill="rgb(232,18,1)" fg:x="174" fg:w="1"/><text x="73.0533%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="72.8033%" y="181" width="0.4184%" height="15" fill="rgb(215,41,42)" fg:x="174" fg:w="1"/><text x="73.0533%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="72.8033%" y="165" width="0.4184%" height="15" fill="rgb(224,123,36)" fg:x="174" fg:w="1"/><text x="73.0533%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 0.84%)</title><rect x="73.6402%" y="245" width="0.8368%" height="15" fill="rgb(240,125,3)" fg:x="176" fg:w="2"/><text x="73.8902%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 0.84%)</title><rect x="74.4770%" y="245" width="0.8368%" height="15" fill="rgb(205,98,50)" fg:x="178" fg:w="2"/><text x="74.7270%" y="255.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="75.3138%" y="245" width="0.4184%" height="15" fill="rgb(205,185,37)" fg:x="180" fg:w="1"/><text x="75.5638%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="77.4059%" y="165" width="0.4184%" height="15" fill="rgb(238,207,15)" fg:x="185" fg:w="1"/><text x="77.6559%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="77.4059%" y="149" width="0.4184%" height="15" fill="rgb(213,199,42)" fg:x="185" fg:w="1"/><text x="77.6559%" y="159.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6 samples, 2.51%)</title><rect x="75.7322%" y="245" width="2.5105%" height="15" fill="rgb(235,201,11)" fg:x="181" fg:w="6"/><text x="75.9822%" y="255.50">qu..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.84%)</title><rect x="77.4059%" y="229" width="0.8368%" height="15" fill="rgb(207,46,11)" fg:x="185" fg:w="2"/><text x="77.6559%" y="239.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 0.84%)</title><rect x="77.4059%" y="213" width="0.8368%" height="15" fill="rgb(241,35,35)" fg:x="185" fg:w="2"/><text x="77.6559%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.84%)</title><rect x="77.4059%" y="197" width="0.8368%" height="15" fill="rgb(243,32,47)" fg:x="185" fg:w="2"/><text x="77.6559%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.84%)</title><rect x="77.4059%" y="181" width="0.8368%" height="15" fill="rgb(247,202,23)" fg:x="185" fg:w="2"/><text x="77.6559%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="77.8243%" y="165" width="0.4184%" height="15" fill="rgb(219,102,11)" fg:x="186" fg:w="1"/><text x="78.0743%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="78.6611%" y="229" width="0.4184%" height="15" fill="rgb(243,110,44)" fg:x="188" fg:w="1"/><text x="78.9111%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.42%)</title><rect x="79.0795%" y="229" width="0.4184%" height="15" fill="rgb(222,74,54)" fg:x="189" fg:w="1"/><text x="79.3295%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="79.4979%" y="229" width="0.4184%" height="15" fill="rgb(216,99,12)" fg:x="190" fg:w="1"/><text x="79.7479%" y="239.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="79.9163%" y="229" width="0.4184%" height="15" fill="rgb(226,22,26)" fg:x="191" fg:w="1"/><text x="80.1663%" y="239.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="80.3347%" y="229" width="1.2552%" height="15" fill="rgb(217,163,10)" fg:x="192" fg:w="3"/><text x="80.5847%" y="239.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="81.1715%" y="213" width="0.4184%" height="15" fill="rgb(213,25,53)" fg:x="194" fg:w="1"/><text x="81.4215%" y="223.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="81.1715%" y="197" width="0.4184%" height="15" fill="rgb(252,105,26)" fg:x="194" fg:w="1"/><text x="81.4215%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="81.1715%" y="181" width="0.4184%" height="15" fill="rgb(220,39,43)" fg:x="194" fg:w="1"/><text x="81.4215%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (4 samples, 1.67%)</title><rect x="81.5900%" y="213" width="1.6736%" height="15" fill="rgb(229,68,48)" fg:x="195" fg:w="4"/><text x="81.8400%" y="223.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="83.2636%" y="213" width="0.4184%" height="15" fill="rgb(252,8,32)" fg:x="199" fg:w="1"/><text x="83.5136%" y="223.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="83.6820%" y="213" width="1.2552%" height="15" fill="rgb(223,20,43)" fg:x="200" fg:w="3"/><text x="83.9320%" y="223.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="84.5188%" y="197" width="0.4184%" height="15" fill="rgb(229,81,49)" fg:x="202" fg:w="1"/><text x="84.7688%" y="207.50"></text></g><g><title>quicksort_bench`DYLD-STUB$$realloc (1 samples, 0.42%)</title><rect x="84.5188%" y="181" width="0.4184%" height="15" fill="rgb(236,28,36)" fg:x="202" fg:w="1"/><text x="84.7688%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.42%)</title><rect x="84.9372%" y="197" width="0.4184%" height="15" fill="rgb(249,185,26)" fg:x="203" fg:w="1"/><text x="85.1872%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 0.84%)</title><rect x="85.3556%" y="197" width="0.8368%" height="15" fill="rgb(249,174,33)" fg:x="204" fg:w="2"/><text x="85.6056%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="86.6109%" y="149" width="0.4184%" height="15" fill="rgb(233,201,37)" fg:x="207" fg:w="1"/><text x="86.8609%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="86.6109%" y="133" width="0.4184%" height="15" fill="rgb(221,78,26)" fg:x="207" fg:w="1"/><text x="86.8609%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="86.6109%" y="117" width="0.4184%" height="15" fill="rgb(250,127,30)" fg:x="207" fg:w="1"/><text x="86.8609%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.42%)</title><rect x="86.6109%" y="101" width="0.4184%" height="15" fill="rgb(230,49,44)" fg:x="207" fg:w="1"/><text x="86.8609%" y="111.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="86.1925%" y="197" width="1.2552%" height="15" fill="rgb(229,67,23)" fg:x="206" fg:w="3"/><text x="86.4425%" y="207.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2 samples, 0.84%)</title><rect x="86.6109%" y="181" width="0.8368%" height="15" fill="rgb(249,83,47)" fg:x="207" fg:w="2"/><text x="86.8609%" y="191.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 0.84%)</title><rect x="86.6109%" y="165" width="0.8368%" height="15" fill="rgb(215,43,3)" fg:x="207" fg:w="2"/><text x="86.8609%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.42%)</title><rect x="87.0293%" y="149" width="0.4184%" height="15" fill="rgb(238,154,13)" fg:x="208" fg:w="1"/><text x="87.2793%" y="159.50"></text></g><g><title>quicksort_bench`__rdl_alloc (1 samples, 0.42%)</title><rect x="87.4477%" y="197" width="0.4184%" height="15" fill="rgb(219,56,2)" fg:x="209" fg:w="1"/><text x="87.6977%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.42%)</title><rect x="87.8661%" y="181" width="0.4184%" height="15" fill="rgb(233,0,4)" fg:x="210" fg:w="1"/><text x="88.1161%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="88.2845%" y="181" width="0.4184%" height="15" fill="rgb(235,30,7)" fg:x="211" fg:w="1"/><text x="88.5345%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.42%)</title><rect x="88.7029%" y="181" width="0.4184%" height="15" fill="rgb(250,79,13)" fg:x="212" fg:w="1"/><text x="88.9529%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="89.1213%" y="181" width="0.4184%" height="15" fill="rgb(211,146,34)" fg:x="213" fg:w="1"/><text x="89.3713%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (3 samples, 1.26%)</title><rect x="89.5397%" y="181" width="1.2552%" height="15" fill="rgb(228,22,38)" fg:x="214" fg:w="3"/><text x="89.7897%" y="191.50"></text></g><g><title>quicksort_bench`&lt;[V] as alloc::slice::Concat&lt;T&gt;&gt;::concat (1 samples, 0.42%)</title><rect x="90.7950%" y="181" width="0.4184%" height="15" fill="rgb(235,168,5)" fg:x="217" fg:w="1"/><text x="91.0450%" y="191.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.84%)</title><rect x="91.2134%" y="181" width="0.8368%" height="15" fill="rgb(221,155,16)" fg:x="218" fg:w="2"/><text x="91.4634%" y="191.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="91.6318%" y="165" width="0.4184%" height="15" fill="rgb(215,215,53)" fg:x="219" fg:w="1"/><text x="91.8818%" y="175.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="91.6318%" y="149" width="0.4184%" height="15" fill="rgb(223,4,10)" fg:x="219" fg:w="1"/><text x="91.8818%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="91.6318%" y="133" width="0.4184%" height="15" fill="rgb(234,103,6)" fg:x="219" fg:w="1"/><text x="91.8818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.42%)</title><rect x="91.6318%" y="117" width="0.4184%" height="15" fill="rgb(227,97,0)" fg:x="219" fg:w="1"/><text x="91.8818%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.42%)</title><rect x="91.6318%" y="101" width="0.4184%" height="15" fill="rgb(234,150,53)" fg:x="219" fg:w="1"/><text x="91.8818%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.42%)</title><rect x="92.0502%" y="165" width="0.4184%" height="15" fill="rgb(228,201,54)" fg:x="220" fg:w="1"/><text x="92.3002%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.42%)</title><rect x="92.4686%" y="165" width="0.4184%" height="15" fill="rgb(222,22,37)" fg:x="221" fg:w="1"/><text x="92.7186%" y="175.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.42%)</title><rect x="92.8870%" y="165" width="0.4184%" height="15" fill="rgb(237,53,32)" fg:x="222" fg:w="1"/><text x="93.1370%" y="175.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.42%)</title><rect x="92.8870%" y="149" width="0.4184%" height="15" fill="rgb(233,25,53)" fg:x="222" fg:w="1"/><text x="93.1370%" y="159.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.42%)</title><rect x="92.8870%" y="133" width="0.4184%" height="15" fill="rgb(210,40,34)" fg:x="222" fg:w="1"/><text x="93.1370%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.42%)</title><rect x="92.8870%" y="117" width="0.4184%" height="15" fill="rgb(241,220,44)" fg:x="222" fg:w="1"/><text x="93.1370%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_realloc (1 samples, 0.42%)</title><rect x="92.8870%" y="101" width="0.4184%" height="15" fill="rgb(235,28,35)" fg:x="222" fg:w="1"/><text x="93.1370%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.42%)</title><rect x="93.3054%" y="149" width="0.4184%" height="15" fill="rgb(210,56,17)" fg:x="223" fg:w="1"/><text x="93.5554%" y="159.50"></text></g><g><title>quicksort_bench`DYLD-STUB$$free (1 samples, 0.42%)</title><rect x="93.7238%" y="149" width="0.4184%" height="15" fill="rgb(224,130,29)" fg:x="224" fg:w="1"/><text x="93.9738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.42%)</title><rect x="94.1423%" y="133" width="0.4184%" height="15" fill="rgb(235,212,8)" fg:x="225" fg:w="1"/><text x="94.3923%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="94.5607%" y="133" width="0.4184%" height="15" fill="rgb(223,33,50)" fg:x="226" fg:w="1"/><text x="94.8107%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="96.2343%" y="53" width="0.4184%" height="15" fill="rgb(219,149,13)" fg:x="230" fg:w="1"/><text x="96.4843%" y="63.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 2.09%)</title><rect x="94.9791%" y="133" width="2.0921%" height="15" fill="rgb(250,156,29)" fg:x="227" fg:w="5"/><text x="95.2291%" y="143.50">q..</text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 1.26%)</title><rect x="95.8159%" y="117" width="1.2552%" height="15" fill="rgb(216,193,19)" fg:x="229" fg:w="3"/><text x="96.0659%" y="127.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 0.84%)</title><rect x="96.2343%" y="101" width="0.8368%" height="15" fill="rgb(216,135,14)" fg:x="230" fg:w="2"/><text x="96.4843%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 0.84%)</title><rect x="96.2343%" y="85" width="0.8368%" height="15" fill="rgb(241,47,5)" fg:x="230" fg:w="2"/><text x="96.4843%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 0.84%)</title><rect x="96.2343%" y="69" width="0.8368%" height="15" fill="rgb(233,42,35)" fg:x="230" fg:w="2"/><text x="96.4843%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.42%)</title><rect x="96.6527%" y="53" width="0.4184%" height="15" fill="rgb(231,13,6)" fg:x="231" fg:w="1"/><text x="96.9027%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.42%)</title><rect x="96.6527%" y="37" width="0.4184%" height="15" fill="rgb(207,181,40)" fg:x="231" fg:w="1"/><text x="96.9027%" y="47.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.42%)</title><rect x="97.0711%" y="117" width="0.4184%" height="15" fill="rgb(254,173,49)" fg:x="232" fg:w="1"/><text x="97.3211%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="97.4895%" y="101" width="0.4184%" height="15" fill="rgb(221,1,38)" fg:x="233" fg:w="1"/><text x="97.7395%" y="111.50"></text></g><g><title>quicksort_bench`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 1.26%)</title><rect x="97.9079%" y="101" width="1.2552%" height="15" fill="rgb(206,124,46)" fg:x="234" fg:w="3"/><text x="98.1579%" y="111.50"></text></g><g><title>dyld`start (238 samples, 99.58%)</title><rect x="0.0000%" y="741" width="99.5816%" height="15" fill="rgb(249,21,11)" fg:x="0" fg:w="238"/><text x="0.2500%" y="751.50">dyld`start</text></g><g><title>quicksort_bench`main (237 samples, 99.16%)</title><rect x="0.4184%" y="725" width="99.1632%" height="15" fill="rgb(222,201,40)" fg:x="1" fg:w="237"/><text x="0.6684%" y="735.50">quicksort_bench`main</text></g><g><title>quicksort_bench`std::rt::lang_start_internal (237 samples, 99.16%)</title><rect x="0.4184%" y="709" width="99.1632%" height="15" fill="rgb(235,61,29)" fg:x="1" fg:w="237"/><text x="0.6684%" y="719.50">quicksort_bench`std::rt::lang_start_internal</text></g><g><title>quicksort_bench`std::rt::lang_start::_{{closure}} (237 samples, 99.16%)</title><rect x="0.4184%" y="693" width="99.1632%" height="15" fill="rgb(219,207,3)" fg:x="1" fg:w="237"/><text x="0.6684%" y="703.50">quicksort_bench`std::rt::lang_start::_{{closure}}</text></g><g><title>quicksort_bench`std::sys_common::backtrace::__rust_begin_short_backtrace (237 samples, 99.16%)</title><rect x="0.4184%" y="677" width="99.1632%" height="15" fill="rgb(222,56,46)" fg:x="1" fg:w="237"/><text x="0.6684%" y="687.50">quicksort_bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>quicksort_bench`quicksort_bench::main (237 samples, 99.16%)</title><rect x="0.4184%" y="661" width="99.1632%" height="15" fill="rgb(239,76,54)" fg:x="1" fg:w="237"/><text x="0.6684%" y="671.50">quicksort_bench`quicksort_bench::main</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (227 samples, 94.98%)</title><rect x="4.6025%" y="645" width="94.9791%" height="15" fill="rgb(231,124,27)" fg:x="11" fg:w="227"/><text x="4.8525%" y="655.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (223 samples, 93.31%)</title><rect x="6.2762%" y="629" width="93.3054%" height="15" fill="rgb(249,195,6)" fg:x="15" fg:w="223"/><text x="6.5262%" y="639.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (214 samples, 89.54%)</title><rect x="10.0418%" y="613" width="89.5397%" height="15" fill="rgb(237,174,47)" fg:x="24" fg:w="214"/><text x="10.2918%" y="623.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (209 samples, 87.45%)</title><rect x="12.1339%" y="597" width="87.4477%" height="15" fill="rgb(206,201,31)" fg:x="29" fg:w="209"/><text x="12.3839%" y="607.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (203 samples, 84.94%)</title><rect x="14.6444%" y="581" width="84.9372%" height="15" fill="rgb(231,57,52)" fg:x="35" fg:w="203"/><text x="14.8944%" y="591.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (198 samples, 82.85%)</title><rect x="16.7364%" y="565" width="82.8452%" height="15" fill="rgb(248,177,22)" fg:x="40" fg:w="198"/><text x="16.9864%" y="575.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (190 samples, 79.50%)</title><rect x="20.0837%" y="549" width="79.4979%" height="15" fill="rgb(215,211,37)" fg:x="48" fg:w="190"/><text x="20.3337%" y="559.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (183 samples, 76.57%)</title><rect x="23.0126%" y="533" width="76.5690%" height="15" fill="rgb(241,128,51)" fg:x="55" fg:w="183"/><text x="23.2626%" y="543.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (180 samples, 75.31%)</title><rect x="24.2678%" y="517" width="75.3138%" height="15" fill="rgb(227,165,31)" fg:x="58" fg:w="180"/><text x="24.5178%" y="527.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (174 samples, 72.80%)</title><rect x="26.7782%" y="501" width="72.8033%" height="15" fill="rgb(228,167,24)" fg:x="64" fg:w="174"/><text x="27.0282%" y="511.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (169 samples, 70.71%)</title><rect x="28.8703%" y="485" width="70.7113%" height="15" fill="rgb(228,143,12)" fg:x="69" fg:w="169"/><text x="29.1203%" y="495.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (162 samples, 67.78%)</title><rect x="31.7992%" y="469" width="67.7824%" height="15" fill="rgb(249,149,8)" fg:x="76" fg:w="162"/><text x="32.0492%" y="479.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (156 samples, 65.27%)</title><rect x="34.3096%" y="453" width="65.2720%" height="15" fill="rgb(243,35,44)" fg:x="82" fg:w="156"/><text x="34.5596%" y="463.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (154 samples, 64.44%)</title><rect x="35.1464%" y="437" width="64.4351%" height="15" fill="rgb(246,89,9)" fg:x="84" fg:w="154"/><text x="35.3964%" y="447.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (148 samples, 61.92%)</title><rect x="37.6569%" y="421" width="61.9247%" height="15" fill="rgb(233,213,13)" fg:x="90" fg:w="148"/><text x="37.9069%" y="431.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (140 samples, 58.58%)</title><rect x="41.0042%" y="405" width="58.5774%" height="15" fill="rgb(233,141,41)" fg:x="98" fg:w="140"/><text x="41.2542%" y="415.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (130 samples, 54.39%)</title><rect x="45.1883%" y="389" width="54.3933%" height="15" fill="rgb(239,167,4)" fg:x="108" fg:w="130"/><text x="45.4383%" y="399.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (122 samples, 51.05%)</title><rect x="48.5356%" y="373" width="51.0460%" height="15" fill="rgb(209,217,16)" fg:x="116" fg:w="122"/><text x="48.7856%" y="383.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (117 samples, 48.95%)</title><rect x="50.6276%" y="357" width="48.9540%" height="15" fill="rgb(219,88,35)" fg:x="121" fg:w="117"/><text x="50.8776%" y="367.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (110 samples, 46.03%)</title><rect x="53.5565%" y="341" width="46.0251%" height="15" fill="rgb(220,193,23)" fg:x="128" fg:w="110"/><text x="53.8065%" y="351.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (105 samples, 43.93%)</title><rect x="55.6485%" y="325" width="43.9331%" height="15" fill="rgb(230,90,52)" fg:x="133" fg:w="105"/><text x="55.8985%" y="335.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (96 samples, 40.17%)</title><rect x="59.4142%" y="309" width="40.1674%" height="15" fill="rgb(252,106,19)" fg:x="142" fg:w="96"/><text x="59.6642%" y="319.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (79 samples, 33.05%)</title><rect x="66.5272%" y="293" width="33.0544%" height="15" fill="rgb(206,74,20)" fg:x="159" fg:w="79"/><text x="66.7772%" y="303.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (74 samples, 30.96%)</title><rect x="68.6192%" y="277" width="30.9623%" height="15" fill="rgb(230,138,44)" fg:x="164" fg:w="74"/><text x="68.8692%" y="287.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (63 samples, 26.36%)</title><rect x="73.2218%" y="261" width="26.3598%" height="15" fill="rgb(235,182,43)" fg:x="175" fg:w="63"/><text x="73.4718%" y="271.50">quicksort_bench`quicksort_bench::quicksort</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (51 samples, 21.34%)</title><rect x="78.2427%" y="245" width="21.3389%" height="15" fill="rgb(242,16,51)" fg:x="187" fg:w="51"/><text x="78.4927%" y="255.50">quicksort_bench`quicksort_bench::q..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (43 samples, 17.99%)</title><rect x="81.5900%" y="229" width="17.9916%" height="15" fill="rgb(248,9,4)" fg:x="195" fg:w="43"/><text x="81.8400%" y="239.50">quicksort_bench`quicksort_be..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (35 samples, 14.64%)</title><rect x="84.9372%" y="213" width="14.6444%" height="15" fill="rgb(210,31,22)" fg:x="203" fg:w="35"/><text x="85.1872%" y="223.50">quicksort_bench`quicks..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (28 samples, 11.72%)</title><rect x="87.8661%" y="197" width="11.7155%" height="15" fill="rgb(239,54,39)" fg:x="210" fg:w="28"/><text x="88.1161%" y="207.50">quicksort_bench`q..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (18 samples, 7.53%)</title><rect x="92.0502%" y="181" width="7.5314%" height="15" fill="rgb(230,99,41)" fg:x="220" fg:w="18"/><text x="92.3002%" y="191.50">quicksort_..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (15 samples, 6.28%)</title><rect x="93.3054%" y="165" width="6.2762%" height="15" fill="rgb(253,106,12)" fg:x="223" fg:w="15"/><text x="93.5554%" y="175.50">quicksor..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (13 samples, 5.44%)</title><rect x="94.1423%" y="149" width="5.4393%" height="15" fill="rgb(213,46,41)" fg:x="225" fg:w="13"/><text x="94.3923%" y="159.50">quickso..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (6 samples, 2.51%)</title><rect x="97.0711%" y="133" width="2.5105%" height="15" fill="rgb(215,133,35)" fg:x="232" fg:w="6"/><text x="97.3211%" y="143.50">qu..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (5 samples, 2.09%)</title><rect x="97.4895%" y="117" width="2.0921%" height="15" fill="rgb(213,28,5)" fg:x="233" fg:w="5"/><text x="97.7395%" y="127.50">q..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort (1 samples, 0.42%)</title><rect x="99.1632%" y="101" width="0.4184%" height="15" fill="rgb(215,77,49)" fg:x="237" fg:w="1"/><text x="99.4132%" y="111.50"></text></g><g><title>quicksort_bench`quicksort_bench::quicksort (1 samples, 0.42%)</title><rect x="99.1632%" y="85" width="0.4184%" height="15" fill="rgb(248,100,22)" fg:x="237" fg:w="1"/><text x="99.4132%" y="95.50"></text></g><g><title>quicksort_bench`quicksort_bench::quicksort (1 samples, 0.42%)</title><rect x="99.1632%" y="69" width="0.4184%" height="15" fill="rgb(208,67,9)" fg:x="237" fg:w="1"/><text x="99.4132%" y="79.50"></text></g><g><title>quicksort_bench`quicksort_bench::quicksort (1 samples, 0.42%)</title><rect x="99.1632%" y="53" width="0.4184%" height="15" fill="rgb(219,133,21)" fg:x="237" fg:w="1"/><text x="99.4132%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.42%)</title><rect x="99.1632%" y="37" width="0.4184%" height="15" fill="rgb(246,46,29)" fg:x="237" fg:w="1"/><text x="99.4132%" y="47.50"></text></g><g><title>all (239 samples, 100%)</title><rect x="0.0000%" y="757" width="100.0000%" height="15" fill="rgb(246,185,52)" fg:x="0" fg:w="239"/><text x="0.2500%" y="767.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.42%)</title><rect x="99.5816%" y="741" width="0.4184%" height="15" fill="rgb(252,136,11)" fg:x="238" fg:w="1"/><text x="99.8316%" y="751.50"></text></g></svg></svg>