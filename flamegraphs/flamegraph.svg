<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="790" onload="init(evt)" viewBox="0 0 1200 790" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="790" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="773.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="773.00"> </text><svg id="frames" x="10" width="1180" total_samples="189"><g><title>quicksort_bench`&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (4 samples, 2.12%)</title><rect x="0.0000%" y="645" width="2.1164%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="4"/><text x="0.2500%" y="655.50">q..</text></g><g><title>libdyld.dylib`tlv_get_addr (3 samples, 1.59%)</title><rect x="3.7037%" y="629" width="1.5873%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="3"/><text x="3.9537%" y="639.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.53%)</title><rect x="5.2910%" y="629" width="0.5291%" height="15" fill="rgb(221,193,54)" fg:x="10" fg:w="1"/><text x="5.5410%" y="639.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.53%)</title><rect x="5.2910%" y="613" width="0.5291%" height="15" fill="rgb(248,212,6)" fg:x="10" fg:w="1"/><text x="5.5410%" y="623.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="7.4074%" y="613" width="1.0582%" height="15" fill="rgb(208,68,35)" fg:x="14" fg:w="2"/><text x="7.6574%" y="623.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="7.4074%" y="597" width="1.0582%" height="15" fill="rgb(232,128,0)" fg:x="14" fg:w="2"/><text x="7.6574%" y="607.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="7.4074%" y="581" width="1.0582%" height="15" fill="rgb(207,160,47)" fg:x="14" fg:w="2"/><text x="7.6574%" y="591.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="7.4074%" y="565" width="1.0582%" height="15" fill="rgb(228,23,34)" fg:x="14" fg:w="2"/><text x="7.6574%" y="575.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 1.06%)</title><rect x="7.4074%" y="549" width="1.0582%" height="15" fill="rgb(218,30,26)" fg:x="14" fg:w="2"/><text x="7.6574%" y="559.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="14.2857%" y="549" width="0.5291%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="1"/><text x="14.5357%" y="559.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="14.8148%" y="549" width="0.5291%" height="15" fill="rgb(250,228,42)" fg:x="28" fg:w="1"/><text x="15.0648%" y="559.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="14.8148%" y="533" width="0.5291%" height="15" fill="rgb(240,193,28)" fg:x="28" fg:w="1"/><text x="15.0648%" y="543.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="14.8148%" y="517" width="0.5291%" height="15" fill="rgb(216,20,37)" fg:x="28" fg:w="1"/><text x="15.0648%" y="527.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.53%)</title><rect x="14.8148%" y="501" width="0.5291%" height="15" fill="rgb(206,188,39)" fg:x="28" fg:w="1"/><text x="15.0648%" y="511.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="14.8148%" y="485" width="0.5291%" height="15" fill="rgb(217,207,13)" fg:x="28" fg:w="1"/><text x="15.0648%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.53%)</title><rect x="19.5767%" y="517" width="0.5291%" height="15" fill="rgb(231,73,38)" fg:x="37" fg:w="1"/><text x="19.8267%" y="527.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="20.1058%" y="517" width="0.5291%" height="15" fill="rgb(225,20,46)" fg:x="38" fg:w="1"/><text x="20.3558%" y="527.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="20.1058%" y="501" width="0.5291%" height="15" fill="rgb(210,31,41)" fg:x="38" fg:w="1"/><text x="20.3558%" y="511.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="20.1058%" y="485" width="0.5291%" height="15" fill="rgb(221,200,47)" fg:x="38" fg:w="1"/><text x="20.3558%" y="495.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.53%)</title><rect x="20.1058%" y="469" width="0.5291%" height="15" fill="rgb(226,26,5)" fg:x="38" fg:w="1"/><text x="20.3558%" y="479.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="20.1058%" y="453" width="0.5291%" height="15" fill="rgb(249,33,26)" fg:x="38" fg:w="1"/><text x="20.3558%" y="463.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="21.6931%" y="485" width="0.5291%" height="15" fill="rgb(235,183,28)" fg:x="41" fg:w="1"/><text x="21.9431%" y="495.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="24.3386%" y="469" width="0.5291%" height="15" fill="rgb(221,5,38)" fg:x="46" fg:w="1"/><text x="24.5886%" y="479.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="24.8677%" y="469" width="0.5291%" height="15" fill="rgb(247,18,42)" fg:x="47" fg:w="1"/><text x="25.1177%" y="479.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="24.8677%" y="453" width="0.5291%" height="15" fill="rgb(241,131,45)" fg:x="47" fg:w="1"/><text x="25.1177%" y="463.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="24.8677%" y="437" width="0.5291%" height="15" fill="rgb(249,31,29)" fg:x="47" fg:w="1"/><text x="25.1177%" y="447.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.53%)</title><rect x="24.8677%" y="421" width="0.5291%" height="15" fill="rgb(225,111,53)" fg:x="47" fg:w="1"/><text x="25.1177%" y="431.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="24.8677%" y="405" width="0.5291%" height="15" fill="rgb(238,160,17)" fg:x="47" fg:w="1"/><text x="25.1177%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`free_medium (1 samples, 0.53%)</title><rect x="28.0423%" y="437" width="0.5291%" height="15" fill="rgb(214,148,48)" fg:x="53" fg:w="1"/><text x="28.2923%" y="447.50"></text></g><g><title>libsystem_kernel.dylib`madvise (1 samples, 0.53%)</title><rect x="28.0423%" y="421" width="0.5291%" height="15" fill="rgb(232,36,49)" fg:x="53" fg:w="1"/><text x="28.2923%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="28.5714%" y="437" width="0.5291%" height="15" fill="rgb(209,103,24)" fg:x="54" fg:w="1"/><text x="28.8214%" y="447.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="29.1005%" y="437" width="0.5291%" height="15" fill="rgb(229,88,8)" fg:x="55" fg:w="1"/><text x="29.3505%" y="447.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="29.1005%" y="421" width="0.5291%" height="15" fill="rgb(213,181,19)" fg:x="55" fg:w="1"/><text x="29.3505%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="29.1005%" y="405" width="0.5291%" height="15" fill="rgb(254,191,54)" fg:x="55" fg:w="1"/><text x="29.3505%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.53%)</title><rect x="29.1005%" y="389" width="0.5291%" height="15" fill="rgb(241,83,37)" fg:x="55" fg:w="1"/><text x="29.3505%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.53%)</title><rect x="29.1005%" y="373" width="0.5291%" height="15" fill="rgb(233,36,39)" fg:x="55" fg:w="1"/><text x="29.3505%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.53%)</title><rect x="30.1587%" y="421" width="0.5291%" height="15" fill="rgb(226,3,54)" fg:x="57" fg:w="1"/><text x="30.4087%" y="431.50"></text></g><g><title>libsystem_malloc.dylib`rack_get_thread_index (1 samples, 0.53%)</title><rect x="30.1587%" y="405" width="0.5291%" height="15" fill="rgb(245,192,40)" fg:x="57" fg:w="1"/><text x="30.4087%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="30.6878%" y="357" width="0.5291%" height="15" fill="rgb(238,167,29)" fg:x="58" fg:w="1"/><text x="30.9378%" y="367.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="30.6878%" y="421" width="1.0582%" height="15" fill="rgb(232,182,51)" fg:x="58" fg:w="2"/><text x="30.9378%" y="431.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="30.6878%" y="405" width="1.0582%" height="15" fill="rgb(231,60,39)" fg:x="58" fg:w="2"/><text x="30.9378%" y="415.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="30.6878%" y="389" width="1.0582%" height="15" fill="rgb(208,69,12)" fg:x="58" fg:w="2"/><text x="30.9378%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="30.6878%" y="373" width="1.0582%" height="15" fill="rgb(235,93,37)" fg:x="58" fg:w="2"/><text x="30.9378%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.53%)</title><rect x="31.2169%" y="357" width="0.5291%" height="15" fill="rgb(213,116,39)" fg:x="59" fg:w="1"/><text x="31.4669%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.53%)</title><rect x="32.8042%" y="341" width="0.5291%" height="15" fill="rgb(222,207,29)" fg:x="62" fg:w="1"/><text x="33.0542%" y="351.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="32.8042%" y="405" width="1.0582%" height="15" fill="rgb(206,96,30)" fg:x="62" fg:w="2"/><text x="33.0542%" y="415.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="32.8042%" y="389" width="1.0582%" height="15" fill="rgb(218,138,4)" fg:x="62" fg:w="2"/><text x="33.0542%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="32.8042%" y="373" width="1.0582%" height="15" fill="rgb(250,191,14)" fg:x="62" fg:w="2"/><text x="33.0542%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="32.8042%" y="357" width="1.0582%" height="15" fill="rgb(239,60,40)" fg:x="62" fg:w="2"/><text x="33.0542%" y="367.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="33.3333%" y="341" width="0.5291%" height="15" fill="rgb(206,27,48)" fg:x="63" fg:w="1"/><text x="33.5833%" y="351.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="35.9788%" y="389" width="0.5291%" height="15" fill="rgb(225,35,8)" fg:x="68" fg:w="1"/><text x="36.2288%" y="399.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="36.5079%" y="325" width="0.5291%" height="15" fill="rgb(250,213,24)" fg:x="69" fg:w="1"/><text x="36.7579%" y="335.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.59%)</title><rect x="36.5079%" y="389" width="1.5873%" height="15" fill="rgb(247,123,22)" fg:x="69" fg:w="3"/><text x="36.7579%" y="399.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (3 samples, 1.59%)</title><rect x="36.5079%" y="373" width="1.5873%" height="15" fill="rgb(231,138,38)" fg:x="69" fg:w="3"/><text x="36.7579%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 1.59%)</title><rect x="36.5079%" y="357" width="1.5873%" height="15" fill="rgb(231,145,46)" fg:x="69" fg:w="3"/><text x="36.7579%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 1.59%)</title><rect x="36.5079%" y="341" width="1.5873%" height="15" fill="rgb(251,118,11)" fg:x="69" fg:w="3"/><text x="36.7579%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (2 samples, 1.06%)</title><rect x="37.0370%" y="325" width="1.0582%" height="15" fill="rgb(217,147,25)" fg:x="70" fg:w="2"/><text x="37.2870%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_szone_free (1 samples, 0.53%)</title><rect x="39.1534%" y="373" width="0.5291%" height="15" fill="rgb(247,81,37)" fg:x="74" fg:w="1"/><text x="39.4034%" y="383.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="39.6825%" y="373" width="0.5291%" height="15" fill="rgb(209,12,38)" fg:x="75" fg:w="1"/><text x="39.9325%" y="383.50"></text></g><g><title>quicksort_bench`__rdl_alloc (1 samples, 0.53%)</title><rect x="40.2116%" y="373" width="0.5291%" height="15" fill="rgb(227,1,9)" fg:x="76" fg:w="1"/><text x="40.4616%" y="383.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.53%)</title><rect x="43.3862%" y="293" width="0.5291%" height="15" fill="rgb(248,47,43)" fg:x="82" fg:w="1"/><text x="43.6362%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`free_small (1 samples, 0.53%)</title><rect x="43.3862%" y="277" width="0.5291%" height="15" fill="rgb(221,10,30)" fg:x="82" fg:w="1"/><text x="43.6362%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="43.3862%" y="325" width="1.0582%" height="15" fill="rgb(210,229,1)" fg:x="82" fg:w="2"/><text x="43.6362%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="43.3862%" y="309" width="1.0582%" height="15" fill="rgb(222,148,37)" fg:x="82" fg:w="2"/><text x="43.6362%" y="319.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="43.9153%" y="293" width="0.5291%" height="15" fill="rgb(234,67,33)" fg:x="83" fg:w="1"/><text x="44.1653%" y="303.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.59%)</title><rect x="43.3862%" y="357" width="1.5873%" height="15" fill="rgb(247,98,35)" fg:x="82" fg:w="3"/><text x="43.6362%" y="367.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (3 samples, 1.59%)</title><rect x="43.3862%" y="341" width="1.5873%" height="15" fill="rgb(247,138,52)" fg:x="82" fg:w="3"/><text x="43.6362%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.53%)</title><rect x="44.4444%" y="325" width="0.5291%" height="15" fill="rgb(213,79,30)" fg:x="84" fg:w="1"/><text x="44.6944%" y="335.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="44.9735%" y="357" width="0.5291%" height="15" fill="rgb(246,177,23)" fg:x="85" fg:w="1"/><text x="45.2235%" y="367.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="47.0899%" y="341" width="0.5291%" height="15" fill="rgb(230,62,27)" fg:x="89" fg:w="1"/><text x="47.3399%" y="351.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_allocate_outlined (1 samples, 0.53%)</title><rect x="47.6190%" y="341" width="0.5291%" height="15" fill="rgb(216,154,8)" fg:x="90" fg:w="1"/><text x="47.8690%" y="351.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.59%)</title><rect x="48.1481%" y="341" width="1.5873%" height="15" fill="rgb(244,35,45)" fg:x="91" fg:w="3"/><text x="48.3981%" y="351.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="48.6772%" y="325" width="1.0582%" height="15" fill="rgb(251,115,12)" fg:x="92" fg:w="2"/><text x="48.9272%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="48.6772%" y="309" width="1.0582%" height="15" fill="rgb(240,54,50)" fg:x="92" fg:w="2"/><text x="48.9272%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="48.6772%" y="293" width="1.0582%" height="15" fill="rgb(233,84,52)" fg:x="92" fg:w="2"/><text x="48.9272%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (1 samples, 0.53%)</title><rect x="49.2063%" y="277" width="0.5291%" height="15" fill="rgb(207,117,47)" fg:x="93" fg:w="1"/><text x="49.4563%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.53%)</title><rect x="49.2063%" y="261" width="0.5291%" height="15" fill="rgb(249,43,39)" fg:x="93" fg:w="1"/><text x="49.4563%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`small_malloc_should_clear (1 samples, 0.53%)</title><rect x="49.2063%" y="245" width="0.5291%" height="15" fill="rgb(209,38,44)" fg:x="93" fg:w="1"/><text x="49.4563%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="51.3228%" y="325" width="0.5291%" height="15" fill="rgb(236,212,23)" fg:x="97" fg:w="1"/><text x="51.5728%" y="335.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="51.8519%" y="325" width="0.5291%" height="15" fill="rgb(242,79,21)" fg:x="98" fg:w="1"/><text x="52.1019%" y="335.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.53%)</title><rect x="52.3810%" y="277" width="0.5291%" height="15" fill="rgb(211,96,35)" fg:x="99" fg:w="1"/><text x="52.6310%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="52.3810%" y="261" width="0.5291%" height="15" fill="rgb(253,215,40)" fg:x="99" fg:w="1"/><text x="52.6310%" y="271.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="52.3810%" y="325" width="1.0582%" height="15" fill="rgb(211,81,21)" fg:x="99" fg:w="2"/><text x="52.6310%" y="335.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="52.3810%" y="309" width="1.0582%" height="15" fill="rgb(208,190,38)" fg:x="99" fg:w="2"/><text x="52.6310%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="52.3810%" y="293" width="1.0582%" height="15" fill="rgb(235,213,38)" fg:x="99" fg:w="2"/><text x="52.6310%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.53%)</title><rect x="52.9101%" y="277" width="0.5291%" height="15" fill="rgb(237,122,38)" fg:x="100" fg:w="1"/><text x="53.1601%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="53.9683%" y="309" width="0.5291%" height="15" fill="rgb(244,218,35)" fg:x="102" fg:w="1"/><text x="54.2183%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.53%)</title><rect x="54.4974%" y="309" width="0.5291%" height="15" fill="rgb(240,68,47)" fg:x="103" fg:w="1"/><text x="54.7474%" y="319.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 1.06%)</title><rect x="55.0265%" y="309" width="1.0582%" height="15" fill="rgb(210,16,53)" fg:x="104" fg:w="2"/><text x="55.2765%" y="319.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="56.0847%" y="309" width="0.5291%" height="15" fill="rgb(235,124,12)" fg:x="106" fg:w="1"/><text x="56.3347%" y="319.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="56.0847%" y="293" width="0.5291%" height="15" fill="rgb(224,169,11)" fg:x="106" fg:w="1"/><text x="56.3347%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="56.0847%" y="277" width="0.5291%" height="15" fill="rgb(250,166,2)" fg:x="106" fg:w="1"/><text x="56.3347%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 1.06%)</title><rect x="57.6720%" y="293" width="1.0582%" height="15" fill="rgb(242,216,29)" fg:x="109" fg:w="2"/><text x="57.9220%" y="303.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="58.7302%" y="277" width="0.5291%" height="15" fill="rgb(230,116,27)" fg:x="111" fg:w="1"/><text x="58.9802%" y="287.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="58.7302%" y="293" width="1.0582%" height="15" fill="rgb(228,99,48)" fg:x="111" fg:w="2"/><text x="58.9802%" y="303.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="59.2593%" y="277" width="0.5291%" height="15" fill="rgb(253,11,6)" fg:x="112" fg:w="1"/><text x="59.5093%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`free (2 samples, 1.06%)</title><rect x="63.4921%" y="277" width="1.0582%" height="15" fill="rgb(247,143,39)" fg:x="120" fg:w="2"/><text x="63.7421%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (2 samples, 1.06%)</title><rect x="64.5503%" y="277" width="1.0582%" height="15" fill="rgb(236,97,10)" fg:x="122" fg:w="2"/><text x="64.8003%" y="287.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="65.6085%" y="277" width="0.5291%" height="15" fill="rgb(233,208,19)" fg:x="124" fg:w="1"/><text x="65.8585%" y="287.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.53%)</title><rect x="67.1958%" y="261" width="0.5291%" height="15" fill="rgb(216,164,2)" fg:x="127" fg:w="1"/><text x="67.4458%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="67.7249%" y="261" width="0.5291%" height="15" fill="rgb(220,129,5)" fg:x="128" fg:w="1"/><text x="67.9749%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="68.2540%" y="245" width="0.5291%" height="15" fill="rgb(242,17,10)" fg:x="129" fg:w="1"/><text x="68.5040%" y="255.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 3.17%)</title><rect x="66.1376%" y="277" width="3.1746%" height="15" fill="rgb(242,107,0)" fg:x="125" fg:w="6"/><text x="66.3876%" y="287.50">qui..</text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="68.2540%" y="261" width="1.0582%" height="15" fill="rgb(251,28,31)" fg:x="129" fg:w="2"/><text x="68.5040%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.53%)</title><rect x="68.7831%" y="245" width="0.5291%" height="15" fill="rgb(233,223,10)" fg:x="130" fg:w="1"/><text x="69.0331%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="70.8995%" y="261" width="0.5291%" height="15" fill="rgb(215,21,27)" fg:x="134" fg:w="1"/><text x="71.1495%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="71.4286%" y="261" width="0.5291%" height="15" fill="rgb(232,23,21)" fg:x="135" fg:w="1"/><text x="71.6786%" y="271.50"></text></g><g><title>libsystem_platform.dylib`__bzero (1 samples, 0.53%)</title><rect x="71.9577%" y="261" width="0.5291%" height="15" fill="rgb(244,5,23)" fg:x="136" fg:w="1"/><text x="72.2077%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.53%)</title><rect x="72.4868%" y="181" width="0.5291%" height="15" fill="rgb(226,81,46)" fg:x="137" fg:w="1"/><text x="72.7368%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="72.4868%" y="213" width="1.0582%" height="15" fill="rgb(247,70,30)" fg:x="137" fg:w="2"/><text x="72.7368%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (2 samples, 1.06%)</title><rect x="72.4868%" y="197" width="1.0582%" height="15" fill="rgb(212,68,19)" fg:x="137" fg:w="2"/><text x="72.7368%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="73.0159%" y="181" width="0.5291%" height="15" fill="rgb(240,187,13)" fg:x="138" fg:w="1"/><text x="73.2659%" y="191.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (3 samples, 1.59%)</title><rect x="72.4868%" y="261" width="1.5873%" height="15" fill="rgb(223,113,26)" fg:x="137" fg:w="3"/><text x="72.7368%" y="271.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (3 samples, 1.59%)</title><rect x="72.4868%" y="245" width="1.5873%" height="15" fill="rgb(206,192,2)" fg:x="137" fg:w="3"/><text x="72.7368%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 1.59%)</title><rect x="72.4868%" y="229" width="1.5873%" height="15" fill="rgb(241,108,4)" fg:x="137" fg:w="3"/><text x="72.7368%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.53%)</title><rect x="73.5450%" y="213" width="0.5291%" height="15" fill="rgb(247,173,49)" fg:x="139" fg:w="1"/><text x="73.7950%" y="223.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (1 samples, 0.53%)</title><rect x="74.0741%" y="261" width="0.5291%" height="15" fill="rgb(224,114,35)" fg:x="140" fg:w="1"/><text x="74.3241%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="75.1323%" y="245" width="0.5291%" height="15" fill="rgb(245,159,27)" fg:x="142" fg:w="1"/><text x="75.3823%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 1.06%)</title><rect x="75.6614%" y="245" width="1.0582%" height="15" fill="rgb(245,172,44)" fg:x="143" fg:w="2"/><text x="75.9114%" y="255.50"></text></g><g><title>quicksort_bench`__rdl_alloc (1 samples, 0.53%)</title><rect x="76.7196%" y="245" width="0.5291%" height="15" fill="rgb(236,23,11)" fg:x="145" fg:w="1"/><text x="76.9696%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2 samples, 1.06%)</title><rect x="77.2487%" y="229" width="1.0582%" height="15" fill="rgb(205,117,38)" fg:x="146" fg:w="2"/><text x="77.4987%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="78.3069%" y="229" width="0.5291%" height="15" fill="rgb(237,72,25)" fg:x="148" fg:w="1"/><text x="78.5569%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_pointer_size (1 samples, 0.53%)</title><rect x="79.3651%" y="181" width="0.5291%" height="15" fill="rgb(244,70,9)" fg:x="150" fg:w="1"/><text x="79.6151%" y="191.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 3.17%)</title><rect x="77.2487%" y="245" width="3.1746%" height="15" fill="rgb(217,125,39)" fg:x="146" fg:w="6"/><text x="77.4987%" y="255.50">qui..</text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (3 samples, 1.59%)</title><rect x="78.8360%" y="229" width="1.5873%" height="15" fill="rgb(235,36,10)" fg:x="149" fg:w="3"/><text x="79.0860%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (3 samples, 1.59%)</title><rect x="78.8360%" y="213" width="1.5873%" height="15" fill="rgb(251,123,47)" fg:x="149" fg:w="3"/><text x="79.0860%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (3 samples, 1.59%)</title><rect x="78.8360%" y="197" width="1.5873%" height="15" fill="rgb(221,13,13)" fg:x="149" fg:w="3"/><text x="79.0860%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.53%)</title><rect x="79.8942%" y="181" width="0.5291%" height="15" fill="rgb(238,131,9)" fg:x="151" fg:w="1"/><text x="80.1442%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="79.8942%" y="165" width="0.5291%" height="15" fill="rgb(211,50,8)" fg:x="151" fg:w="1"/><text x="80.1442%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.53%)</title><rect x="80.9524%" y="229" width="0.5291%" height="15" fill="rgb(245,182,24)" fg:x="153" fg:w="1"/><text x="81.2024%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="81.4815%" y="229" width="0.5291%" height="15" fill="rgb(242,14,37)" fg:x="154" fg:w="1"/><text x="81.7315%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="82.0106%" y="229" width="0.5291%" height="15" fill="rgb(246,228,12)" fg:x="155" fg:w="1"/><text x="82.2606%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.53%)</title><rect x="82.5397%" y="165" width="0.5291%" height="15" fill="rgb(213,55,15)" fg:x="156" fg:w="1"/><text x="82.7897%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1 samples, 0.53%)</title><rect x="82.5397%" y="149" width="0.5291%" height="15" fill="rgb(209,9,3)" fg:x="156" fg:w="1"/><text x="82.7897%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1 samples, 0.53%)</title><rect x="82.5397%" y="133" width="0.5291%" height="15" fill="rgb(230,59,30)" fg:x="156" fg:w="1"/><text x="82.7897%" y="143.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="82.5397%" y="229" width="1.0582%" height="15" fill="rgb(209,121,21)" fg:x="156" fg:w="2"/><text x="82.7897%" y="239.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="82.5397%" y="213" width="1.0582%" height="15" fill="rgb(220,109,13)" fg:x="156" fg:w="2"/><text x="82.7897%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (2 samples, 1.06%)</title><rect x="82.5397%" y="197" width="1.0582%" height="15" fill="rgb(232,18,1)" fg:x="156" fg:w="2"/><text x="82.7897%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (2 samples, 1.06%)</title><rect x="82.5397%" y="181" width="1.0582%" height="15" fill="rgb(215,41,42)" fg:x="156" fg:w="2"/><text x="82.7897%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (1 samples, 0.53%)</title><rect x="83.0688%" y="165" width="0.5291%" height="15" fill="rgb(224,123,36)" fg:x="157" fg:w="1"/><text x="83.3188%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="84.1270%" y="213" width="0.5291%" height="15" fill="rgb(240,125,3)" fg:x="159" fg:w="1"/><text x="84.3770%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.53%)</title><rect x="84.6561%" y="213" width="0.5291%" height="15" fill="rgb(205,98,50)" fg:x="160" fg:w="1"/><text x="84.9061%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.53%)</title><rect x="85.1852%" y="213" width="0.5291%" height="15" fill="rgb(205,185,37)" fg:x="161" fg:w="1"/><text x="85.4352%" y="223.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="85.7143%" y="213" width="0.5291%" height="15" fill="rgb(238,207,15)" fg:x="162" fg:w="1"/><text x="85.9643%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.53%)</title><rect x="85.7143%" y="197" width="0.5291%" height="15" fill="rgb(213,199,42)" fg:x="162" fg:w="1"/><text x="85.9643%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="87.3016%" y="197" width="0.5291%" height="15" fill="rgb(235,201,11)" fg:x="165" fg:w="1"/><text x="87.5516%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove (2 samples, 1.06%)</title><rect x="87.8307%" y="197" width="1.0582%" height="15" fill="rgb(207,46,11)" fg:x="166" fg:w="2"/><text x="88.0807%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.53%)</title><rect x="89.9471%" y="181" width="0.5291%" height="15" fill="rgb(241,35,35)" fg:x="170" fg:w="1"/><text x="90.1971%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (1 samples, 0.53%)</title><rect x="90.4762%" y="181" width="0.5291%" height="15" fill="rgb(243,32,47)" fg:x="171" fg:w="1"/><text x="90.7262%" y="191.50"></text></g><g><title>quicksort_bench`DYLD-STUB$$free (1 samples, 0.53%)</title><rect x="91.0053%" y="181" width="0.5291%" height="15" fill="rgb(247,202,23)" fg:x="172" fg:w="1"/><text x="91.2553%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`_realloc (1 samples, 0.53%)</title><rect x="91.5344%" y="149" width="0.5291%" height="15" fill="rgb(219,102,11)" fg:x="173" fg:w="1"/><text x="91.7844%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_realloc (1 samples, 0.53%)</title><rect x="91.5344%" y="133" width="0.5291%" height="15" fill="rgb(243,110,44)" fg:x="173" fg:w="1"/><text x="91.7844%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_realloc (1 samples, 0.53%)</title><rect x="91.5344%" y="117" width="0.5291%" height="15" fill="rgb(222,74,54)" fg:x="173" fg:w="1"/><text x="91.7844%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`DYLD-STUB$$_platform_bzero (1 samples, 0.53%)</title><rect x="91.5344%" y="101" width="0.5291%" height="15" fill="rgb(216,99,12)" fg:x="173" fg:w="1"/><text x="91.7844%" y="111.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="91.5344%" y="181" width="1.0582%" height="15" fill="rgb(226,22,26)" fg:x="173" fg:w="2"/><text x="91.7844%" y="191.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="91.5344%" y="165" width="1.0582%" height="15" fill="rgb(217,163,10)" fg:x="173" fg:w="2"/><text x="91.7844%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.53%)</title><rect x="92.0635%" y="149" width="0.5291%" height="15" fill="rgb(213,25,53)" fg:x="174" fg:w="1"/><text x="92.3135%" y="159.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 1.06%)</title><rect x="93.1217%" y="165" width="1.0582%" height="15" fill="rgb(252,105,26)" fg:x="176" fg:w="2"/><text x="93.3717%" y="175.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::finish_grow (2 samples, 1.06%)</title><rect x="93.1217%" y="149" width="1.0582%" height="15" fill="rgb(220,39,43)" fg:x="176" fg:w="2"/><text x="93.3717%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_size (1 samples, 0.53%)</title><rect x="93.6508%" y="133" width="0.5291%" height="15" fill="rgb(229,68,48)" fg:x="177" fg:w="1"/><text x="93.9008%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`nanov2_malloc (1 samples, 0.53%)</title><rect x="94.7090%" y="149" width="0.5291%" height="15" fill="rgb(252,8,32)" fg:x="179" fg:w="1"/><text x="94.9590%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memset (1 samples, 0.53%)</title><rect x="96.2963%" y="133" width="0.5291%" height="15" fill="rgb(223,20,43)" fg:x="182" fg:w="1"/><text x="96.5463%" y="143.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="96.8254%" y="117" width="0.5291%" height="15" fill="rgb(229,81,49)" fg:x="183" fg:w="1"/><text x="97.0754%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (1 samples, 0.53%)</title><rect x="97.3545%" y="85" width="0.5291%" height="15" fill="rgb(236,28,36)" fg:x="184" fg:w="1"/><text x="97.6045%" y="95.50"></text></g><g><title>quicksort_bench`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.53%)</title><rect x="97.8836%" y="69" width="0.5291%" height="15" fill="rgb(249,185,26)" fg:x="185" fg:w="1"/><text x="98.1336%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1 samples, 0.53%)</title><rect x="97.8836%" y="53" width="0.5291%" height="15" fill="rgb(249,174,33)" fg:x="185" fg:w="1"/><text x="98.1336%" y="63.50"></text></g><g><title>dyld`start (188 samples, 99.47%)</title><rect x="0.0000%" y="725" width="99.4709%" height="15" fill="rgb(233,201,37)" fg:x="0" fg:w="188"/><text x="0.2500%" y="735.50">dyld`start</text></g><g><title>quicksort_bench`main (188 samples, 99.47%)</title><rect x="0.0000%" y="709" width="99.4709%" height="15" fill="rgb(221,78,26)" fg:x="0" fg:w="188"/><text x="0.2500%" y="719.50">quicksort_bench`main</text></g><g><title>quicksort_bench`std::rt::lang_start_internal (188 samples, 99.47%)</title><rect x="0.0000%" y="693" width="99.4709%" height="15" fill="rgb(250,127,30)" fg:x="0" fg:w="188"/><text x="0.2500%" y="703.50">quicksort_bench`std::rt::lang_start_internal</text></g><g><title>quicksort_bench`std::rt::lang_start::_{{closure}} (188 samples, 99.47%)</title><rect x="0.0000%" y="677" width="99.4709%" height="15" fill="rgb(230,49,44)" fg:x="0" fg:w="188"/><text x="0.2500%" y="687.50">quicksort_bench`std::rt::lang_start::_{{closure}}</text></g><g><title>quicksort_bench`std::sys_common::backtrace::__rust_begin_short_backtrace (188 samples, 99.47%)</title><rect x="0.0000%" y="661" width="99.4709%" height="15" fill="rgb(229,67,23)" fg:x="0" fg:w="188"/><text x="0.2500%" y="671.50">quicksort_bench`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>quicksort_bench`quicksort_bench::main (184 samples, 97.35%)</title><rect x="2.1164%" y="645" width="97.3545%" height="15" fill="rgb(249,83,47)" fg:x="4" fg:w="184"/><text x="2.3664%" y="655.50">quicksort_bench`quicksort_bench::main</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (177 samples, 93.65%)</title><rect x="5.8201%" y="629" width="93.6508%" height="15" fill="rgb(215,43,3)" fg:x="11" fg:w="177"/><text x="6.0701%" y="639.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (172 samples, 91.01%)</title><rect x="8.4656%" y="613" width="91.0053%" height="15" fill="rgb(238,154,13)" fg:x="16" fg:w="172"/><text x="8.7156%" y="623.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (170 samples, 89.95%)</title><rect x="9.5238%" y="597" width="89.9471%" height="15" fill="rgb(219,56,2)" fg:x="18" fg:w="170"/><text x="9.7738%" y="607.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (167 samples, 88.36%)</title><rect x="11.1111%" y="581" width="88.3598%" height="15" fill="rgb(233,0,4)" fg:x="21" fg:w="167"/><text x="11.3611%" y="591.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (164 samples, 86.77%)</title><rect x="12.6984%" y="565" width="86.7725%" height="15" fill="rgb(235,30,7)" fg:x="24" fg:w="164"/><text x="12.9484%" y="575.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (159 samples, 84.13%)</title><rect x="15.3439%" y="549" width="84.1270%" height="15" fill="rgb(250,79,13)" fg:x="29" fg:w="159"/><text x="15.5939%" y="559.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (155 samples, 82.01%)</title><rect x="17.4603%" y="533" width="82.0106%" height="15" fill="rgb(211,146,34)" fg:x="33" fg:w="155"/><text x="17.7103%" y="543.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (149 samples, 78.84%)</title><rect x="20.6349%" y="517" width="78.8360%" height="15" fill="rgb(228,22,38)" fg:x="39" fg:w="149"/><text x="20.8849%" y="527.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (147 samples, 77.78%)</title><rect x="21.6931%" y="501" width="77.7778%" height="15" fill="rgb(235,168,5)" fg:x="41" fg:w="147"/><text x="21.9431%" y="511.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (146 samples, 77.25%)</title><rect x="22.2222%" y="485" width="77.2487%" height="15" fill="rgb(221,155,16)" fg:x="42" fg:w="146"/><text x="22.4722%" y="495.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (140 samples, 74.07%)</title><rect x="25.3968%" y="469" width="74.0741%" height="15" fill="rgb(215,215,53)" fg:x="48" fg:w="140"/><text x="25.6468%" y="479.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (138 samples, 73.02%)</title><rect x="26.4550%" y="453" width="73.0159%" height="15" fill="rgb(223,4,10)" fg:x="50" fg:w="138"/><text x="26.7050%" y="463.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (132 samples, 69.84%)</title><rect x="29.6296%" y="437" width="69.8413%" height="15" fill="rgb(234,103,6)" fg:x="56" fg:w="132"/><text x="29.8796%" y="447.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (128 samples, 67.72%)</title><rect x="31.7460%" y="421" width="67.7249%" height="15" fill="rgb(227,97,0)" fg:x="60" fg:w="128"/><text x="31.9960%" y="431.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (124 samples, 65.61%)</title><rect x="33.8624%" y="405" width="65.6085%" height="15" fill="rgb(234,150,53)" fg:x="64" fg:w="124"/><text x="34.1124%" y="415.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (116 samples, 61.38%)</title><rect x="38.0952%" y="389" width="61.3757%" height="15" fill="rgb(228,201,54)" fg:x="72" fg:w="116"/><text x="38.3452%" y="399.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (111 samples, 58.73%)</title><rect x="40.7407%" y="373" width="58.7302%" height="15" fill="rgb(222,22,37)" fg:x="77" fg:w="111"/><text x="40.9907%" y="383.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (102 samples, 53.97%)</title><rect x="45.5026%" y="357" width="53.9683%" height="15" fill="rgb(237,53,32)" fg:x="86" fg:w="102"/><text x="45.7526%" y="367.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (94 samples, 49.74%)</title><rect x="49.7354%" y="341" width="49.7354%" height="15" fill="rgb(233,25,53)" fg:x="94" fg:w="94"/><text x="49.9854%" y="351.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (87 samples, 46.03%)</title><rect x="53.4392%" y="325" width="46.0317%" height="15" fill="rgb(210,40,34)" fg:x="101" fg:w="87"/><text x="53.6892%" y="335.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (81 samples, 42.86%)</title><rect x="56.6138%" y="309" width="42.8571%" height="15" fill="rgb(241,220,44)" fg:x="107" fg:w="81"/><text x="56.8638%" y="319.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (75 samples, 39.68%)</title><rect x="59.7884%" y="293" width="39.6825%" height="15" fill="rgb(235,28,35)" fg:x="113" fg:w="75"/><text x="60.0384%" y="303.50">quicksort_bench`quicksort_bench::quicksort_partition</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (57 samples, 30.16%)</title><rect x="69.3122%" y="277" width="30.1587%" height="15" fill="rgb(210,56,17)" fg:x="131" fg:w="57"/><text x="69.5622%" y="287.50">quicksort_bench`quicksort_bench::quicksort_partit..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (47 samples, 24.87%)</title><rect x="74.6032%" y="261" width="24.8677%" height="15" fill="rgb(224,130,29)" fg:x="141" fg:w="47"/><text x="74.8532%" y="271.50">quicksort_bench`quicksort_bench::quickso..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (36 samples, 19.05%)</title><rect x="80.4233%" y="245" width="19.0476%" height="15" fill="rgb(235,212,8)" fg:x="152" fg:w="36"/><text x="80.6733%" y="255.50">quicksort_bench`quicksort_benc..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (30 samples, 15.87%)</title><rect x="83.5979%" y="229" width="15.8730%" height="15" fill="rgb(223,33,50)" fg:x="158" fg:w="30"/><text x="83.8479%" y="239.50">quicksort_bench`quicksor..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (25 samples, 13.23%)</title><rect x="86.2434%" y="213" width="13.2275%" height="15" fill="rgb(219,149,13)" fg:x="163" fg:w="25"/><text x="86.4934%" y="223.50">quicksort_bench`quic..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (20 samples, 10.58%)</title><rect x="88.8889%" y="197" width="10.5820%" height="15" fill="rgb(250,156,29)" fg:x="168" fg:w="20"/><text x="89.1389%" y="207.50">quicksort_bench..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (13 samples, 6.88%)</title><rect x="92.5926%" y="181" width="6.8783%" height="15" fill="rgb(216,193,19)" fg:x="175" fg:w="13"/><text x="92.8426%" y="191.50">quicksort..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (10 samples, 5.29%)</title><rect x="94.1799%" y="165" width="5.2910%" height="15" fill="rgb(216,135,14)" fg:x="178" fg:w="10"/><text x="94.4299%" y="175.50">quicks..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (8 samples, 4.23%)</title><rect x="95.2381%" y="149" width="4.2328%" height="15" fill="rgb(241,47,5)" fg:x="180" fg:w="8"/><text x="95.4881%" y="159.50">quick..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (5 samples, 2.65%)</title><rect x="96.8254%" y="133" width="2.6455%" height="15" fill="rgb(233,42,35)" fg:x="183" fg:w="5"/><text x="97.0754%" y="143.50">qu..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (4 samples, 2.12%)</title><rect x="97.3545%" y="117" width="2.1164%" height="15" fill="rgb(231,13,6)" fg:x="184" fg:w="4"/><text x="97.6045%" y="127.50">q..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (4 samples, 2.12%)</title><rect x="97.3545%" y="101" width="2.1164%" height="15" fill="rgb(207,181,40)" fg:x="184" fg:w="4"/><text x="97.6045%" y="111.50">q..</text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (3 samples, 1.59%)</title><rect x="97.8836%" y="85" width="1.5873%" height="15" fill="rgb(254,173,49)" fg:x="185" fg:w="3"/><text x="98.1336%" y="95.50"></text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (2 samples, 1.06%)</title><rect x="98.4127%" y="69" width="1.0582%" height="15" fill="rgb(221,1,38)" fg:x="186" fg:w="2"/><text x="98.6627%" y="79.50"></text></g><g><title>quicksort_bench`quicksort_bench::quicksort_partition (2 samples, 1.06%)</title><rect x="98.4127%" y="53" width="1.0582%" height="15" fill="rgb(206,124,46)" fg:x="186" fg:w="2"/><text x="98.6627%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_nanov2_free (2 samples, 1.06%)</title><rect x="98.4127%" y="37" width="1.0582%" height="15" fill="rgb(249,21,11)" fg:x="186" fg:w="2"/><text x="98.6627%" y="47.50"></text></g><g><title>all (189 samples, 100%)</title><rect x="0.0000%" y="741" width="100.0000%" height="15" fill="rgb(222,201,40)" fg:x="0" fg:w="189"/><text x="0.2500%" y="751.50"></text></g><g><title>libsystem_kernel.dylib`__exit (1 samples, 0.53%)</title><rect x="99.4709%" y="725" width="0.5291%" height="15" fill="rgb(235,61,29)" fg:x="188" fg:w="1"/><text x="99.7209%" y="735.50"></text></g></svg></svg>